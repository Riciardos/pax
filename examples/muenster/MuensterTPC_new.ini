# This configuration file is adapted from XENON100.ini for the Münster TPC
# It will contain MünsterTPC-specific details
# date: Aug 26th 2015
# editor : Axel Buß

# This config contains the gain calibrated values of Julian B.'s measurements with a green LED at room temperature
[pax]
parent_configuration = "../../examples/muenster/MuensterTPC2"

dsp = [
        # Do some sanity checks / cleaning on pulses
        'CheckPulses.ConcatenateAdjacentPulses',
        'CheckPulses.CheckBounds',

        # Find individual hits
        'HitFinder.FindHits',

        # Combine hits into clusters = peaks
        'Cluster.NaturalBreaks',

        # Compute properties for each peak
        'ComputePeakProperties.BasicProperties',
        'ComputePeakProperties.HitpatternSpread',

        # Classify the clusters based on the properties
        'ClassifyPeaks.AdHocClassification',

        # Make sum waveform for plotting - disable for speed in bulk processing
        'SumWaveform.SumWaveform',
      ]

transform = [
               # 'PosSimple.PosRecWeightedSum',
               # 'NeuralNet.PosRecNeuralNet',
               # 'PosRecChiSquareGamma.PosRecChiSquareGamma',
               # 'MaxPMT.PosRecMaxPMT',
            ]
#output = 'Table.TableWriter'

[DEFAULT]
# Time in the event at which trigger occurs. Set to None or leave out if there is no trigger
trigger_time_in_event = 2560 * ns    # Check settings in caen1724.par
# These gains and sigmas were measured by Julian Blanke in Aug 2015 with a green LED at room temperature
gains = [

        # 0               # 1               # 2               # 3               # 4               # 5               # 6
        2.264e6,          2.036e6,          1.921e6,          1.941e6,          1.865e6,          2.031e6,          2.148e6,
        # 7               # 8               # 9               # 10              # 11              # 12              # 13
        1.998e6,          2.064e6,          2.020e6,          2.180e6,          2.014e6,          1.889e6,          2.002e6,
        ]

gain_sigmas = [
        # 0              # 1               # 2               # 3               # 4              # 5              # 6
        2.581e6 ,        1.971e6,          1.252e6,          1.876e6,          1.517e6,         1.374e6,         1.535e6,
        # 7              # 8               # 9               # 10              # 11             # 12             # 13
        1.330e6 ,        1.372e6,          1.493e6,          1.605e6,          1.176e6,         1.574e6,         0.288e6,
        ]

[Plotting]
waveforms_to_plot = (
                    {'internal_name': 'tpc',      'plot_label': 'TPC (hits only)',
                    'drawstyle': 'steps',         'color':'black'},
                    )
[HitFinder.FindHits]
make_diagnostic_plots = "never"
# Compute baseline on first n samples in pulse:
initial_baseline_samples = 26   # When using ZLE this must not be higher than 2x zle_nlbk as the peaks will be counted in otherwise
height_over_noise_high_threshold = 8
height_over_noise_low_threshold = 1

[Cluster]
# Suspicious channel rejection settings
penalty_per_noise_pulse = 1                 # "pe" equivalent penalty
penalty_per_lone_hit = 1                    # "pe" equivalent penalty
# Threshold to mark a suspicious channel
penalty_geq_this_is_suspicious = 3          # "pe" equivalent penalty

# If the ratio of noise channels / contributing channels is larger than this, classify peak as 'noise'
# noise channel = a channel in the same detector which shows data, but doesn't contribute to the peak
# (or only hits rejected by the suspicious channel algorithm)
max_noise_channels_over_contributing_channels = 2

[Cluster.MeanShift]
s2_size = 20
# If spe peaks are separated by less than this, they will be clustered together
s2_width = 1.0 * us
p_value = 0.999
cluster_all = True

[Cluster.HitDifference]
max_difference = 20 * ns

[Cluster.NaturalBreaks]
# Always break if a gap of this size is encountered
max_gap_size_in_cluster = 60 * ns

# Limit gaps to test for performance reasons
# Haven't tested if these are actually harmful, needed, or effective...
min_gap_size_for_break = 10 * ns

[Cluster.GapSize]
# If there is a gap between hits larger than this, it will make a new cluster
large_gap_threshold = 20 * ns

# If the area in a cluster is larger than this, it is certainly not a single electron, so we can use...
transition_point = 50  #pe

# ... a tighter gap threshold:
small_gap_threshold = 10 * ns

#[Table.TableWriter]
#output_format = 'hdf5_pandas'      # hdf5, csv, numpy, html, json, root, hdf5_pandas
# Don't leave out hits and pulses -- that's what we're after!
#fields_to_ignore = ['hits',
#                    'raw data',
#                    'channel_waveforms',
#                   'sum_waveform',
#                   ]

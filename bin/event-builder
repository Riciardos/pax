#!/usr/bin/env python
""" Processor for Analyzing XENON - command line interface """

import argparse
import logging
import pymongo
import sys
import time
from pax import core

##
# Parse command line arguments
##
def main():
    parser = argparse.ArgumentParser(description="Build XENON1T events from the data aquisiton.")

    parser.add_argument('--wait',
                        default=1,
                        type=int,
                        help="Wait time between searching if no data")

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--master',
                       action='store_true')

    group.add_argument('--standalone',
                       action='store_true')

    run_db_group = parser.add_argument_group(title='Runs database settings',
                                             description='The runs database stores '
                                                         'all metadata about runs, '
                                                         'including which are '
                                                         'waiting to be '
                                                         'triggered.')
    run_db_group.add_argument('--address',
                              default='127.0.0.1',
                              help='Address or hostname of MongoDB instance.')
    run_db_group.add_argument('--database',
                              default='online',
                              help='')
    run_db_group.add_argument('--collection',
                              default='runs',
                              help='')
    run_db_group.add_argument('--port',
                              default=27017,
                              type=int,
                              help='Listening port of MongoDB.')

    # Log level control
    parser.add_argument('--log', default=None, help="Set log level, e.g. 'debug'")

    # set up logging to file - see previous section for more details
    logging.basicConfig(level=logging.DEBUG,
                        format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
                        datefmt='%m-%d %H:%M',
                        filename='myapp.log',
                        filemode='w')
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.DEBUG)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(asctime)s %(name)-12s: %(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    log = logging.getLogger('eb')

    args = parser.parse_args()
    print(args)
    query = {"trigger.status" : "waiting_to_be_processed"}


    log.info("Searching for run")

    client = pymongo.MongoClient(args.address,
                                 args.port,
                                 serverSelectionTimeoutMS=500)
    try:
        client.admin.command('ping')
        log.debug("Connection successful to %s:%d",
                  args.address,
                  args.port)
    except pymongo.errors.ConnectionFailure:
        log.fatal("Cannot connect to MongoDB at %s:%d" % (args.address,
                                                          args.port))
        raise

    log.debug('Fetching databases: %s', args.database)
    db = client.get_database(args.database)

    log.debug('Getting collection: %s', args.collection)
    collection = db.get_collection(args.collection)

    while 1:
        run_doc = collection.find_one_and_update(query,
                                             {'$set': {'trigger.status' : 'staging'}})

        if run_doc is None:
            log.info("No data to process... waiting %d seconds",
                         args.wait)
            time.sleep(args.wait)
        else:
            log.info("Building events for %s",
                         run_doc['name'])

            filename = 'raw_%s.avro' % run_doc['name']
            try:
                p = core.Processor(config_names='eventbuilder_standalone',
                           config_dict={'DEFAULT' : {'run_doc' : run_doc['_id']},
                                        'output_name' : filename,
                                        'MongoDB' : {'runs_database_location' : {'address' : args.address,
                                                                                 'database' : args.database,
                                                                                 'collection' : args.collection}}})

                p.run()
            except pymongo.errors.ServerSelectionTimeoutError as e:
                log.exception(e)
                collection.update(query,
                                  {'$set': {'trigger.status' : 'error'}})

if __name__ == "__main__":
    main()

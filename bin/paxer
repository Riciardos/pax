#!/usr/bin/env python
""" Processor for Analyzing XENON - command line interface """

import argparse

from pax import core



##
# Parse command line arguments
##
parser = argparse.ArgumentParser(description="Process XENON1 data")

# Input specification
parser.add_argument('input', default=None, help="File or database to read events from", nargs='?')

# Log level control
parser.add_argument('--log', default='INFO', help="Set log level, e.g. 'debug'")

# Configuration control
# Pass in a name to use a pre-cooked config from config:
parser.add_argument(
    '--config',
    default='XENON100',
    choices=core.get_named_configuration_options(),
    nargs='+',
    help="Name(s) of the pax configuration(s) to use."
)
# ...or pass in a path to your own config file:
parser.add_argument(
    '--config_path',
    default=[],
    nargs='+',
    help="Path(s) of the configuration file(s) to use."
)

# Plotting override
plotting_control_group = parser.add_mutually_exclusive_group()
plotting_control_group.add_argument(
    '--plot',
    action='store_const',
    const=True,
    help='Plot summed waveforms on screen',
)
plotting_control_group.add_argument(
    '--plot_to_dir',
    help='Save summed waveform plots in directory',
)
parser.add_argument(
    '--plot_every',
    default=1,
    help='Plot only every PLOT_EVERY waveform',
)


# Control events to process
input_control_group = parser.add_mutually_exclusive_group()
input_control_group.add_argument('--event',
                                 type=int,
                                 nargs='+',
                                 help="Process particular event(s).")
input_control_group.add_argument('--stop_after',
                                 type=int,
                                 help="Stop after STOP_AFTER events have been processed.")

args = parser.parse_args()

# Construct plotting override string
override_string = ''
if args.plot_to_dir or args.plot :
    override_string += '[pax]\noutput="Plotting.PlotWaveform"\n'
    if args.plot_to_dir or args.plot_every:
        override_string += '\n[Plotting.PlotWaveform]\n'
        if args.plot_to_dir:
            override_string += 'output_dir = %s\n' % args.plot_to_dir
        if args.plot_every:
            override_string += 'plot_every = %s\n' % args.plot_every


##
# Load configuration and run the processor
##
config = core.init_configuration(
    config_names=args.config,
    config_paths=args.config_path,
    config_string=override_string
)

core.processor(
    config = config,
    # These will be None if the arguments are not present
    log_spec=args.log,
    events_to_process=args.event,
    stop_after=args.stop_after,
    input_spec=args.input
)

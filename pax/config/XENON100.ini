##
# XENON100-specific configuration settings
##

# This is just for setting up pax
[pax]
parent_configuration = "_base"

input = 'XED.ReadXED'
decoder_plugin = 'XED.DecodeXED'

# Digital signal processing - if you want to repeat any of this,
# you need to go back to raw data and start from scratch
dsp = [
            # Do some sanity checks / cleaning on pulses
            'CheckPulses.SortPulses',
            'CheckPulses.ConcatenateAdjacentPulses',
            'CheckPulses.CheckBounds',

            # Find individual hits
            'HitFinder.FindHits',

            # Combine hits into rough clusters = peaks
            'BuildPeaks.GapSizeClustering',

            # Reject hits in noisy channels
            'RejectNoiseHits.RejectNoiseHits',
            'SumWaveform.SumWaveform',  # Must do this AFTER noisy hit rejection!

            # Refine the clustering / split peaks
            'NaturalBreaksClustering.NaturalBreaksClustering',

            # Compute sum-waveform and hit-dependent properties for each peak
            'BasicProperties.BasicProperties',
            'BasicProperties.SumWaveformProperties',
            'BasicProperties.CountCoincidentNoisePulses'
        ]

# Compute peak properties: can be redone from processed data file
compute_properties = [
                        'WeightedSum.PosRecWeightedSum',
                        'MaxPMT.PosRecMaxPMT',
                        'RobustWeightedMean.PosRecRobustWeightedMean',
                        'NeuralNet.PosRecNeuralNet',
                        'TopPatternFit.PosRecTopPatternFit',
                        'HitpatternSpread.HitpatternSpread',

                        # Calculate S2 spatial and saturation corrections
                        'PeakAreaCorrections.S2SpatialCorrection',
                        'PeakAreaCorrections.S2SaturationCorrection',

                     ]

# Final stage with 'risky' operations: peak classification, S1/S2 pairing, corrections
# Intentionally last, so reclassification takes least work
pre_analysis = [
                # Classify the clusters based on the properties
                'ClassifyPeaks.AdHocClassification',

                # Do 3d posrec on the S1s (would like to do this earlier on all peaks, but performance...)
                'ThreeDPatternFit.PosRecThreeDPatternFit',

                # Combine S1 and S2 into pairs = interactions and compute properties
                # which depend on S1 AND S2 specific information (i.e. z-corrections)
                'BuildInteractions.BuildInteractions',
                'BuildInteractions.BasicInteractionProperties',
               ]



[HitFinder]
# For detailed description of what these settings do, see the documentation / plugin docstring.

# Compute baseline on first n samples in pulse:
initial_baseline_samples = 40

# Max hits to look for in each pulse: rest will be ignored
max_hits_per_pulse = 500

# Diagnostic plots settings
make_diagnostic_plots = 'never'     # Can be always, never, tricky cases, no hits, hits only, saturated
make_diagnostic_plots_in = 'hitfinder_diagnostic_plots'
# Add extra information to diagnostic plots - this gives info on sum of hits in one pulse
diagnostic_plot_info = 'yes' # can be yes or no

# Threshold 1: Height / noise.
height_over_noise_high_threshold = 8       # Reasonable and conservative for run10: see xenon:xenon100:analysis:led_pax
height_over_noise_low_threshold = 1

# Threshold 2: Absolute ADC counts above baseline
absolute_adc_counts_high_threshold = 1   # ADC counts
absolute_adc_counts_low_threshold = 1   # ADC counts


# Threshold 3:  - Height / minimum
height_over_min_high_threshold = 2
height_over_min_low_threshold = 0

# Raise low threshold temporarily to fraction of hit height for rest of pulse
dynamic_low_threshold_coeff = 0.01



[BuildPeaks.GapSizeClustering]
# Start a new cluster / peak if a gap larger than this is encountered
# see [note tbd]
max_gap_size_in_cluster = 650 * ns



[NaturalBreaksClustering]
# Points in log10(peak_area), goodness_of_split. Split threshold is linearly interpolated between these.
# Manual "fit" to stay above 99.9th percentile of a menagerie of signals -- see this note:
# xenon:xenon1t:processor:natural_breaks_clustering
split_goodness_threshold = ([0, 1.5, 2.5, 3, 3.5, 9], [1, 0.8, 0.51, 0.46, 0.44, 0.44])

# Minimum gap between hits to qualify as a break:
# This means there must be a certain time with no hits at all.
# If you set this to 0,
#   + you will be probably be able to split double scatter S2s at high-energy.
#   0 overlapping peaks become possible;
#   - you will see weird results in the electron train after large S2s (e.g. lots of s1s found);
#   - the performance drops sharply (because every split point between hits now needs to be tested)
min_gap_size_for_break = 10 * ns


[RejectNoiseHits]
# Suspicious channel rejection settings
penalty_per_noise_pulse = 0                 # "pe" equivalent penalty
penalty_per_lone_hit = 1                    # "pe" equivalent penalty

# Threshold to mark a suspicious channel
penalty_geq_this_is_suspicious = 3          # "pe" equivalent penalty

# Very dodgy channels start with a base penalty to make them always suspicious
# This means they will contribute only if non-suspicious channels in the same detector show > 3pe area
# Dodgy channels selected using run 10 noisy AmBe (120402_2000)
base_penalties = {'33':  3,
                  '91':  3,
                  '128': 3,
                  '145': 3,
                  '157': 3,
                  '171': 3,
                  '178': 3,
                  '104': 3,
                  '182': 3,
                 }


[BasicProperties.SumWaveformProperties]
# Length of the peak sum waveform field.
# Must be an even multiple of sample size, pax will add 1 sample width so there is a clear center.
peak_waveform_length = 2.5 * us



[BuildInteractions.BuildInteractions]
# Pair S1s and S2s in order of size, but no more than these:
pair_n_s2s = 5
pair_n_s1s = 3

# Never pair S2s smaller than:
s2_pairing_threshold = 70  # pe


[BuildInteractions.BasicInteractionProperties]
# Add 'zombie PMTS' here
# To turn off set active_saturation_and_zombie_correction = False
# These are PMTs who have died, but the loss of light yield has not yet been accounted for in the overall S1 or S2
# light yield map. These PMTs will be treated just like saturated PMTs: when computing the corrected area,
# the observed area in the zombie channels (which will be 0) is replaced by the expected area based on the other PMTs.
# DO NOT keep PMTs here after the light yield maps have been fixed!!!
# If you don't understand why, stop modifying the file and just fix the light yield map!
active_saturation_and_zombie_correction = True
zombie_pmts_s1 = []
# S2 zombie PMTs will only work on the top, as we have no S2(x,y,pmt) patterns for the bottom array.
# For now, all dead top PMTs are included for the S2, since we don't have the S2(x, y) light yield in pax yet...
zombie_pmts_s2 = [] #[9, 12, 39, 58]


[RobustWeightedMean.PosRecRobustWeightedMean]
# Remove PMTs that are more than ... away in each step
outlier_threshold = 2.5     # 3 and 2 both seem a little worse, though not much. 1.5 is clearly worse.

# Give up if this number of PMTs (or less) is left
min_pmts_left = 3

# Outer ring PMTs are partially obstructed by the TPC wall, upweigh their areas to compensate
outer_ring_pmts = list(range(1, 30 + 1))
outer_ring_multiplication_factor = 1.5


[Plotting]
waveforms_to_plot = (
        {'internal_name': 'tpc',      'plot_label': 'TPC (hits only)',
                    'drawstyle': 'steps', 'color':'black'},
        {'internal_name': 'tpc_raw',  'plot_label': 'TPC (raw)',
                    'drawstyle': 'steps', 'color':'black', 'alpha': 0.3},
        {'internal_name': 'veto',     'plot_label': 'Veto (hits only)',
                    'drawstyle': 'steps', 'color':'red'},
        {'internal_name': 'veto_raw', 'plot_label': 'Veto (raw)',
                    'drawstyle': 'steps', 'color':'red', 'alpha': 0.2},
    )


##
# Simulator-specific settings
##
[WaveformSimulator.WaveformSimulatorFromCSV]
input_name =                          'dummy_waveforms.csv'

[WaveformSimulator.WaveformSimulatorFromNEST]
input_name =                          'Neutron-4FaX-10k.root'
# Alex Kish's code coordinate system: Z = -21.5mm halfway between gate and anode (decreasing downwards as usual)
# We want z=0 at the gate, so we must add (21.5 + 0.25) mm
add_to_z = (2.15 + 0.25) * cm


[WaveformSimulator]
# See comments in base ini for why this is true for XENON100, but not yet XENON1T
magically_avoid_dead_pmts =           True

# Waveform building / noise simulation settings
real_noise_file =                    'noise_120326.npz'  # Must be a numpy.savez_compressed file containing 1 numpy array (row per channel) of noise data
                                                         # Set to None or False if you don't want to use real noise
real_noise_sample_size =              150                # Data is concatenated in noise file: this specifies original sample size. We'll take these samples and shuffle them.

# Slow control data
pressure =                            2.22 * bar          # xenon:xenon1t:analysis:maxime:liquidlevelandpressureanalysis, also in slow control / run database
temperature =                         (-89.32 + 273.15) * K    # InsideBell temperature, xenon:xenon100:analysis:stability_run10
anode_voltage =                       4.0 * kV            # Slow control / run database (early run10)

# PMT characteristics
pmt_transit_time_mean     =           50  * ns           # PLACEHOLDER - PMT handbook upper limit for linear focussed pmt type
                                                         # Not a big issue I think, this merely shifts the entire waveform. Could even put it 0.
pmt_transit_time_spread   =           0.8 * ns           # xenon:xenon100:pmtdatasheets, Room temperature
pmt_rise_time             =           1.8 * ns           # xenon:xenon100:pmtdatasheets, Room temperature
pmt_fall_time             =           6.7 * ns           # PLACEHOLDER - Can't find this! Now chosen 3.7 * rise time, as for Lung et al. 2012 (X1T PMTs)
    # Note this pmt pulse shape is probably not accurate, even besides the uncertain parameters, the amplifier & digitizer also shape the pulse.
    # Guillaume's fadc.py / spe.py has 4ns as the RC time for the digitizer, so not a big effect?

# Currently only used for s1 time structure calculations:
drift_field =                         530 * V /cm        # TODO add ref ('The xenon100 experiment'?)
liquid_density =                      3 * g / cm**3      # PLACEHOLDER

# S2 electron drift and extraction
drift_velocity_liquid_above_gate =    0.272*cm/us        # From the single electron paper
diffusion_constant_liquid =           12*cm**(2)/s       # Sorensen 2011, longitudinal diffusion. Ethan's code uses 70*cm**(2)/s! (0.007*mm**2/us)
electron_extraction_yield =           1                  # "above 0.96" xenon:xenon100:analysis:maxime:s2afterpulses
gate_to_anode_distance =              5 * mm             # See e.g. single electron paper, several other places

# S2 electroluminescence
elr_gas_gap_length =                  4.0 * mm            # Jelle: Fit to Xenon100 single-e S2s xenon:xenon100:analysis:single_e_waveform_model
                                                          # Xenon100 Analysis paper, page 4, "h_g ~ 2.5 mm"
s2_secondary_sc_gain_density =        19.7/(4.0*mm)       # "secondary scintillation gain" per length unit. 19.7 from NSort.
                                                          # TODO: this should NOT include zero-length encoding & hitfinder effects, i.e. has to be corrected from measured value!!
# Distance from anode where field becomes wire-like (~1/r) rather than uniform:
anode_field_domination_distance =     0.65 * mm           # Jelle: Fit to Xenon100 single-e S2s xenon:xenon100:analysis:single_e_waveform_model
# Distance from anode where field stops:
anode_wire_radius =                   125/2 * um          # GPlante p 98

# Light distribution
s1_light_yield_map =                  's1_xyz_XENON100_xerawdp045.json'
s1_detection_efficiency =             0.08                # NSort. This should include LCE and QE effects, but not zero-length encoding / hitfinder acceptance.
                                                          # For S2 there is no corresponding setting, we measure the sec. scintillation gain
s2_light_yield_map =                  's2_xy_XENON100_xerawdp045.json'
s2_patterns_file =                    's2_xy_patterns_map_XENON100_Xerawdp0.4.5.json.gz'
s2_patterns_zoom_factor =             4                   # Upsample S2 pattern map by this factor (in both dimensions, so memory usage grows quadratically)
s1_patterns_file =                    'XENON100_s1_xyz_patterns.json.gz'
s1_patterns_zoom_factor =             1                   # Use a very zoomed-out map for patternfitter performance

s2_mean_area_fraction_top =           0.555               # S2 asymmetry average = 0.11, top fraction = (1 + A)/2. Todo: check / add ref!


# Global settings, passed to every plugin
[DEFAULT]
tpc_name = "XENON100"
tpc_length = 30.5 * cm          # G. Plante page 95
tpc_radius = 15.3 * cm          # G. Plante page 95

# Signal generation settings
electron_lifetime_liquid =            450 * us           # AmBe Run12 mean value, see e.g. xenon1t:sim:notes:morana:ambe:nest
drift_velocity_liquid     =           1.73 * um / ns     # Andrea says 1.73 um/ns. Ethan's code has 1.8 mm/us.

# Time in the event at which trigger occurs. Set to None or leave out if there is no trigger
trigger_time_in_event = 200 * us    # G. Plante page 114

pmt_0_is_fake = True

# Preference in algorithms to use for the xy reconstructed position
# used in buildinteractions and peakareacorrections
xy_posrec_preference = ['PosRecTopPatternFit', 'PosRecNeuralNet',
                        'PosRecRobustWeightedMean', 'PosRecWeightedSum', 'PosRecMaxPMT']

# Detector specification
# PlotChannelWaveform2D expects the detector names' lexical order to be the same as the channel order
channels_in_detector = {
    'tpc':   list(range(0,   178+1)),
    'veto':  list(range(179, 242+1)),
    }
n_channels = 242 + 1   # +1 for the fake pmt 0

# PMT numbers for tpc, specified as lists
# Remember python range does not include endpoint!
# PMT 0 does not exist, its gain is set to 0 later
channels_top = list(range(0,  98 + 1))
channels_bottom = list(range(99, 178 + 1))


# PMT mappings - daq (module, digitizer channel) -> pmt number
pmt_mappings = {'(54, 0)': 1,
              '(54, 1)': 2,
              '(54, 2)': 3,
              '(54, 3)': 4,
              '(54, 4)': 5,
              '(54, 5)': 6,
              '(54, 6)': 7,
              '(54, 7)': 8,
              '(78, 0)': 131,
              '(78, 1)': 132,
              '(78, 2)': 133,
              '(78, 3)': 134,
              '(78, 4)': 135,
              '(78, 5)': 136,
              '(78, 6)': 137,
              '(78, 7)': 138,
              '(79, 0)': 139,
              '(79, 1)': 140,
              '(79, 2)': 141,
              '(79, 3)': 142,
              '(79, 4)': 143,
              '(79, 5)': 144,
              '(79, 6)': 145,
              '(79, 7)': 146,
              '(80, 0)': 235,
              '(80, 1)': 236,
              '(80, 2)': 237,
              '(80, 3)': 238,
              '(80, 4)': 239,
              '(80, 5)': 240,
              '(80, 6)': 241,
              '(80, 7)': 242,
              '(89, 0)': 123,
              '(89, 1)': 124,
              '(89, 2)': 125,
              '(89, 3)': 126,
              '(89, 4)': 127,
              '(89, 5)': 128,
              '(89, 6)': 129,
              '(89, 7)': 130,
              '(95, 0)': 147,
              '(95, 1)': 148,
              '(95, 2)': 149,
              '(95, 3)': 150,
              '(95, 4)': 151,
              '(95, 5)': 152,
              '(95, 6)': 153,
              '(95, 7)': 154,
              '(102, 0)': 16,
              '(102, 1)': 17,
              '(102, 2)': 18,
              '(102, 3)': 19,
              '(102, 4)': 20,
              '(102, 5)': 21,
              '(102, 6)': 22,
              '(102, 7)': 23,
              '(106, 0)': 9,
              '(106, 1)': 10,
              '(106, 2)': 11,
              '(106, 3)': 12,
              '(106, 4)': 13,
              '(106, 5)': 14,
              '(106, 6)': 15,
              '(107, 0)': 24,
              '(107, 1)': 25,
              '(107, 2)': 26,
              '(107, 3)': 27,
              '(107, 4)': 28,
              '(107, 5)': 29,
              '(107, 6)': 30,
              '(108, 0)': 219,
              '(108, 1)': 220,
              '(108, 2)': 221,
              '(108, 3)': 222,
              '(108, 4)': 223,
              '(108, 5)': 224,
              '(108, 6)': 225,
              '(108, 7)': 226,
              '(110, 0)': 211,
              '(110, 1)': 212,
              '(110, 2)': 213,
              '(110, 3)': 214,
              '(110, 4)': 215,
              '(110, 5)': 216,
              '(110, 6)': 217,
              '(110, 7)': 218,
              '(115, 0)': 31,
              '(115, 1)': 32,
              '(115, 2)': 33,
              '(115, 3)': 34,
              '(115, 4)': 35,
              '(115, 5)': 36,
              '(115, 6)': 37,
              '(115, 7)': 38,
              '(117, 0)': 187,
              '(117, 1)': 188,
              '(117, 2)': 189,
              '(117, 3)': 190,
              '(117, 4)': 191,
              '(117, 5)': 192,
              '(117, 6)': 193,
              '(117, 7)': 194,
              '(121, 0)': 39,
              '(121, 1)': 40,
              '(121, 2)': 41,
              '(121, 3)': 42,
              '(121, 4)': 43,
              '(121, 5)': 44,
              '(121, 6)': 45,
              '(121, 7)': 46,
              '(124, 0)': 55,
              '(124, 1)': 56,
              '(124, 2)': 57,
              '(124, 3)': 58,
              '(124, 4)': 59,
              '(124, 5)': 60,
              '(124, 6)': 61,
              '(127, 0)': 227,
              '(127, 1)': 228,
              '(127, 2)': 229,
              '(127, 3)': 230,
              '(127, 4)': 231,
              '(127, 5)': 232,
              '(127, 6)': 233,
              '(127, 7)': 234,
              '(136, 0)': 99,
              '(136, 1)': 100,
              '(136, 2)': 101,
              '(136, 3)': 102,
              '(136, 4)': 103,
              '(136, 5)': 104,
              '(136, 6)': 105,
              '(136, 7)': 106,
              '(139, 0)': 62,
              '(139, 1)': 63,
              '(139, 2)': 64,
              '(139, 3)': 65,
              '(139, 4)': 66,
              '(139, 5)': 67,
              '(140, 0)': 68,
              '(140, 1)': 69,
              '(140, 2)': 70,
              '(140, 3)': 71,
              '(140, 4)': 72,
              '(140, 5)': 73,
              '(140, 6)': 74,
              '(143, 0)': 155,
              '(143, 1)': 156,
              '(143, 2)': 157,
              '(143, 3)': 158,
              '(143, 4)': 159,
              '(143, 5)': 160,
              '(143, 6)': 161,
              '(143, 7)': 162,
              '(144, 0)': 75,
              '(144, 1)': 76,
              '(144, 2)': 77,
              '(144, 3)': 78,
              '(144, 4)': 79,
              '(144, 5)': 80,
              '(144, 6)': 81,
              '(144, 7)': 82,
              '(147, 0)': 91,
              '(147, 1)': 92,
              '(147, 2)': 93,
              '(147, 3)': 94,
              '(147, 4)': 95,
              '(147, 5)': 96,
              '(147, 6)': 97,
              '(147, 7)': 98,
              '(150, 0)': 163,
              '(150, 1)': 164,
              '(150, 2)': 165,
              '(150, 3)': 166,
              '(150, 4)': 167,
              '(150, 5)': 168,
              '(150, 6)': 169,
              '(150, 7)': 170,
              '(153, 0)': 179,
              '(153, 1)': 180,
              '(153, 2)': 181,
              '(153, 3)': 182,
              '(153, 4)': 183,
              '(153, 5)': 184,
              '(153, 6)': 185,
              '(153, 7)': 186,
              '(154, 0)': 195,
              '(154, 1)': 196,
              '(154, 2)': 197,
              '(154, 3)': 198,
              '(154, 4)': 199,
              '(154, 5)': 200,
              '(154, 6)': 201,
              '(154, 7)': 202,
              '(156, 0)': 203,
              '(156, 1)': 204,
              '(156, 2)': 205,
              '(156, 3)': 206,
              '(156, 4)': 207,
              '(156, 5)': 208,
              '(156, 6)': 209,
              '(156, 7)': 210,
              '(160, 0)': 171,
              '(160, 1)': 172,
              '(160, 2)': 173,
              '(160, 3)': 174,
              '(160, 4)': 175,
              '(160, 5)': 176,
              '(160, 6)': 177,
              '(160, 7)': 178,
              '(162, 0)': 107,
              '(162, 1)': 108,
              '(162, 2)': 109,
              '(162, 3)': 110,
              '(162, 4)': 111,
              '(162, 5)': 112,
              '(162, 6)': 113,
              '(162, 7)': 114,
              '(165, 0)': 115,
              '(165, 1)': 116,
              '(165, 2)': 117,
              '(165, 3)': 118,
              '(165, 4)': 119,
              '(165, 5)': 120,
              '(165, 6)': 121,
              '(165, 7)': 122,
              '(167, 0)': 83,
              '(167, 1)': 84,
              '(167, 2)': 85,
              '(167, 3)': 86,
              '(167, 4)': 87,
              '(167, 5)': 88,
              '(167, 6)': 89,
              '(167, 7)': 90,
              '(171, 0)': 47,
              '(171, 1)': 48,
              '(171, 2)': 49,
              '(171, 3)': 50,
              '(171, 4)': 51,
              '(171, 5)': 52,
              '(171, 6)': 53,
              '(171, 7)': 54}

# PMT locations taken from Marc Schumann's pmtpattern code.  Agrees also
# with the top PMT locations used by xerawdp.
# Note: don't forget the units...
pmt_locations = [
    {'x':   0.000 * cm, 'y':   0.000 * cm},  # 0
    {'x': -16.684 * cm, 'y':   0.000 * cm},  # 1
    {'x': -16.319 * cm, 'y':   3.469 * cm},  # 2
    {'x': -15.242 * cm, 'y':   6.786 * cm},  # 3
    {'x': -13.498 * cm, 'y':   9.807 * cm},  # 4
    {'x': -11.164 * cm, 'y':  12.399 * cm},  # 5
    {'x':  -8.342 * cm, 'y':  14.449 * cm},  # 6
    {'x':  -5.156 * cm, 'y':  15.867 * cm},  # 7
    {'x':  -1.744 * cm, 'y':  16.593 * cm},  # 8
    {'x':   1.744 * cm, 'y':  16.593 * cm},  # 9
    {'x':   5.156 * cm, 'y':  15.867 * cm},  # 10
    {'x':   8.342 * cm, 'y':  14.449 * cm},  # 11
    {'x':  11.164 * cm, 'y':  12.399 * cm},  # 12
    {'x':  13.498 * cm, 'y':   9.807 * cm},  # 13
    {'x':  15.242 * cm, 'y':   6.786 * cm},  # 14
    {'x':  16.319 * cm, 'y':   3.469 * cm},  # 15
    {'x':  16.684 * cm, 'y':   0.000 * cm},  # 16
    {'x':  16.319 * cm, 'y':  -3.469 * cm},  # 17
    {'x':  15.242 * cm, 'y':  -6.786 * cm},  # 18
    {'x':  13.498 * cm, 'y':  -9.807 * cm},  # 19
    {'x':  11.164 * cm, 'y': -12.399 * cm},  # 20
    {'x':   8.342 * cm, 'y': -14.449 * cm},  # 21
    {'x':   5.156 * cm, 'y': -15.867 * cm},  # 22
    {'x':   1.744 * cm, 'y': -16.593 * cm},  # 23
    {'x':  -1.744 * cm, 'y': -16.593 * cm},  # 24
    {'x':  -5.156 * cm, 'y': -15.867 * cm},  # 25
    {'x':  -8.342 * cm, 'y': -14.449 * cm},  # 26
    {'x': -11.164 * cm, 'y': -12.399 * cm},  # 27
    {'x': -13.498 * cm, 'y':  -9.807 * cm},  # 28
    {'x': -15.242 * cm, 'y':  -6.786 * cm},  # 29
    {'x': -16.319 * cm, 'y':  -3.469 * cm},  # 30
    {'x': -13.653 * cm, 'y':   0.000 * cm},  # 31
    {'x': -13.188 * cm, 'y':   3.534 * cm},  # 32
    {'x': -11.824 * cm, 'y':   6.827 * cm},  # 33
    {'x':  -9.654 * cm, 'y':   9.654 * cm},  # 34
    {'x':  -6.827 * cm, 'y':  11.824 * cm},  # 35
    {'x':  -3.534 * cm, 'y':  13.188 * cm},  # 36
    {'x':   0.000 * cm, 'y':  13.653 * cm},  # 37
    {'x':   3.534 * cm, 'y':  13.188 * cm},  # 38
    {'x':   6.827 * cm, 'y':  11.824 * cm},  # 39
    {'x':   9.654 * cm, 'y':   9.654 * cm},  # 40
    {'x':  11.824 * cm, 'y':   6.827 * cm},  # 41
    {'x':  13.188 * cm, 'y':   3.534 * cm},  # 42
    {'x':  13.653 * cm, 'y':   0.000 * cm},  # 43
    {'x':  13.188 * cm, 'y':  -3.534 * cm},  # 44
    {'x':  11.824 * cm, 'y':  -6.827 * cm},  # 45
    {'x':   9.654 * cm, 'y':  -9.654 * cm},  # 46
    {'x':   6.827 * cm, 'y': -11.824 * cm},  # 47
    {'x':   3.534 * cm, 'y': -13.188 * cm},  # 48
    {'x':   0.000 * cm, 'y': -13.653 * cm},  # 49
    {'x':  -3.534 * cm, 'y': -13.188 * cm},  # 50
    {'x':  -6.827 * cm, 'y': -11.824 * cm},  # 51
    {'x':  -9.654 * cm, 'y':  -9.654 * cm},  # 52
    {'x': -11.824 * cm, 'y':  -6.827 * cm},  # 53
    {'x': -13.188 * cm, 'y':  -3.534 * cm},  # 54
    {'x': -10.620 * cm, 'y':   0.000 * cm},  # 55
    {'x': -10.100 * cm, 'y':   3.282 * cm},  # 56
    {'x':  -8.592 * cm, 'y':   6.242 * cm},  # 57
    {'x':  -6.242 * cm, 'y':   8.592 * cm},  # 58
    {'x':  -3.282 * cm, 'y':  10.100 * cm},  # 59
    {'x':   0.000 * cm, 'y':  10.620 * cm},  # 60
    {'x':   3.282 * cm, 'y':  10.100 * cm},  # 61
    {'x':   6.242 * cm, 'y':   8.592 * cm},  # 62
    {'x':   8.592 * cm, 'y':   6.242 * cm},  # 63
    {'x':  10.100 * cm, 'y':   3.282 * cm},  # 64
    {'x':  10.620 * cm, 'y':   0.000 * cm},  # 65
    {'x':  10.100 * cm, 'y':  -3.282 * cm},  # 66
    {'x':   8.592 * cm, 'y':  -6.242 * cm},  # 67
    {'x':   6.242 * cm, 'y':  -8.592 * cm},  # 68
    {'x':   3.282 * cm, 'y': -10.100 * cm},  # 69
    {'x':   0.000 * cm, 'y': -10.620 * cm},  # 70
    {'x':  -3.282 * cm, 'y': -10.100 * cm},  # 71
    {'x':  -6.242 * cm, 'y':  -8.592 * cm},  # 72
    {'x':  -8.592 * cm, 'y':  -6.242 * cm},  # 73
    {'x': -10.100 * cm, 'y':  -3.282 * cm},  # 74
    {'x':  -7.587 * cm, 'y':   0.000 * cm},  # 75
    {'x':  -6.876 * cm, 'y':   3.206 * cm},  # 76
    {'x':  -4.775 * cm, 'y':   5.896 * cm},  # 77
    {'x':  -1.707 * cm, 'y':   7.393 * cm},  # 78
    {'x':   1.577 * cm, 'y':   7.421 * cm},  # 79
    {'x':   4.671 * cm, 'y':   5.979 * cm},  # 80
    {'x':   6.819 * cm, 'y':   3.326 * cm},  # 81
    {'x':   7.587 * cm, 'y':   0.000 * cm},  # 82
    {'x':   6.876 * cm, 'y':  -3.206 * cm},  # 83
    {'x':   4.775 * cm, 'y':  -5.896 * cm},  # 84
    {'x':   1.707 * cm, 'y':  -7.393 * cm},  # 85
    {'x':  -1.577 * cm, 'y':  -7.421 * cm},  # 86
    {'x':  -4.671 * cm, 'y':  -5.979 * cm},  # 87
    {'x':  -6.819 * cm, 'y':  -3.326 * cm},  # 88
    {'x':  -4.500 * cm, 'y':   0.000 * cm},  # 89
    {'x':  -3.000 * cm, 'y':   3.000 * cm},  # 90
    {'x':   0.000 * cm, 'y':   4.500 * cm},  # 91
    {'x':   3.000 * cm, 'y':   3.000 * cm},  # 92
    {'x':   4.500 * cm, 'y':   0.000 * cm},  # 93
    {'x':   3.000 * cm, 'y':  -3.000 * cm},  # 94
    {'x':   0.000 * cm, 'y':  -4.500 * cm},  # 95
    {'x':  -3.000 * cm, 'y':  -3.000 * cm},  # 96
    {'x':  -1.500 * cm, 'y':   0.000 * cm},  # 97
    {'x':   1.500 * cm, 'y':   0.000 * cm},  # 98
    {'x':  -4.115 * cm, 'y':  12.344 * cm},  # 99
    {'x':  -1.371 * cm, 'y':  12.344 * cm},  # 100
    {'x':   1.371 * cm, 'y':  12.344 * cm},  # 101
    {'x':   4.115 * cm, 'y':  12.344 * cm},  # 102
    {'x':  -8.229 * cm, 'y':   9.600 * cm},  # 103
    {'x':  -5.486 * cm, 'y':   9.600 * cm},  # 104
    {'x':  -2.743 * cm, 'y':   9.600 * cm},  # 105
    {'x':  -0.000 * cm, 'y':   9.600 * cm},  # 106
    {'x':   2.743 * cm, 'y':   9.600 * cm},  # 107
    {'x':   5.486 * cm, 'y':   9.600 * cm},  # 108
    {'x':   8.229 * cm, 'y':   9.600 * cm},  # 109
    {'x': -10.972 * cm, 'y':   6.858 * cm},  # 110
    {'x':  -8.229 * cm, 'y':   6.858 * cm},  # 111
    {'x':  -5.486 * cm, 'y':   6.858 * cm},  # 112
    {'x':  -2.743 * cm, 'y':   6.858 * cm},  # 113
    {'x':  -0.000 * cm, 'y':   6.858 * cm},  # 114
    {'x':   2.743 * cm, 'y':   6.858 * cm},  # 115
    {'x':   5.486 * cm, 'y':   6.858 * cm},  # 116
    {'x':   8.229 * cm, 'y':   6.858 * cm},  # 117
    {'x':  10.972 * cm, 'y':   6.858 * cm},  # 118
    {'x': -12.344 * cm, 'y':   4.115 * cm},  # 119
    {'x':  -9.600 * cm, 'y':   4.115 * cm},  # 120
    {'x':  -6.858 * cm, 'y':   4.115 * cm},  # 121
    {'x':  -4.115 * cm, 'y':   4.115 * cm},  # 122
    {'x':  -1.371 * cm, 'y':   4.115 * cm},  # 123
    {'x':   1.371 * cm, 'y':   4.115 * cm},  # 124
    {'x':   4.115 * cm, 'y':   4.115 * cm},  # 125
    {'x':   6.858 * cm, 'y':   4.115 * cm},  # 126
    {'x':   9.600 * cm, 'y':   4.115 * cm},  # 127
    {'x':  12.344 * cm, 'y':   4.115 * cm},  # 128
    {'x': -12.344 * cm, 'y':   1.371 * cm},  # 129
    {'x':  -9.600 * cm, 'y':   1.371 * cm},  # 130
    {'x':  -6.858 * cm, 'y':   1.371 * cm},  # 131
    {'x':  -4.115 * cm, 'y':   1.371 * cm},  # 132
    {'x':  -1.371 * cm, 'y':   1.371 * cm},  # 133
    {'x':   1.371 * cm, 'y':   1.371 * cm},  # 134
    {'x':   4.115 * cm, 'y':   1.371 * cm},  # 135
    {'x':   6.858 * cm, 'y':   1.371 * cm},  # 136
    {'x':   9.600 * cm, 'y':   1.371 * cm},  # 137
    {'x':  12.344 * cm, 'y':   1.371 * cm},  # 138
    {'x': -12.344 * cm, 'y':  -1.371 * cm},  # 139
    {'x':  -9.600 * cm, 'y':  -1.371 * cm},  # 140
    {'x':  -6.858 * cm, 'y':  -1.371 * cm},  # 141
    {'x':  -4.115 * cm, 'y':  -1.371 * cm},  # 142
    {'x':  -1.371 * cm, 'y':  -1.371 * cm},  # 143
    {'x':   1.371 * cm, 'y':  -1.371 * cm},  # 144
    {'x':   4.115 * cm, 'y':  -1.371 * cm},  # 145
    {'x':   6.858 * cm, 'y':  -1.371 * cm},  # 146
    {'x':   9.600 * cm, 'y':  -1.371 * cm},  # 147
    {'x':  12.344 * cm, 'y':  -1.371 * cm},  # 148
    {'x': -12.344 * cm, 'y':  -4.115 * cm},  # 149
    {'x':  -9.600 * cm, 'y':  -4.115 * cm},  # 150
    {'x':  -6.858 * cm, 'y':  -4.115 * cm},  # 151
    {'x':  -4.115 * cm, 'y':  -4.115 * cm},  # 152
    {'x':  -1.371 * cm, 'y':  -4.115 * cm},  # 153
    {'x':   1.371 * cm, 'y':  -4.115 * cm},  # 154
    {'x':   4.115 * cm, 'y':  -4.115 * cm},  # 155
    {'x':   6.858 * cm, 'y':  -4.115 * cm},  # 156
    {'x':   9.600 * cm, 'y':  -4.115 * cm},  # 157
    {'x':  12.344 * cm, 'y':  -4.115 * cm},  # 158
    {'x': -10.972 * cm, 'y':  -6.858 * cm},  # 159
    {'x':  -8.229 * cm, 'y':  -6.858 * cm},  # 160
    {'x':  -5.486 * cm, 'y':  -6.858 * cm},  # 161
    {'x':  -2.743 * cm, 'y':  -6.858 * cm},  # 162
    {'x':  -0.000 * cm, 'y':  -6.858 * cm},  # 163
    {'x':   2.743 * cm, 'y':  -6.858 * cm},  # 164
    {'x':   5.486 * cm, 'y':  -6.858 * cm},  # 165
    {'x':   8.229 * cm, 'y':  -6.858 * cm},  # 166
    {'x':  10.972 * cm, 'y':  -6.858 * cm},  # 167
    {'x':  -8.229 * cm, 'y':  -9.600 * cm},  # 168
    {'x':  -5.486 * cm, 'y':  -9.600 * cm},  # 169
    {'x':  -2.743 * cm, 'y':  -9.600 * cm},  # 170
    {'x':  -0.000 * cm, 'y':  -9.600 * cm},  # 171
    {'x':   2.743 * cm, 'y':  -9.600 * cm},  # 172
    {'x':   5.486 * cm, 'y':  -9.600 * cm},  # 173
    {'x':   8.229 * cm, 'y':  -9.600 * cm},  # 174
    {'x':  -4.115 * cm, 'y': -12.344 * cm},  # 175
    {'x':  -1.371 * cm, 'y': -12.344 * cm},  # 176
    {'x':   1.371 * cm, 'y': -12.344 * cm},  # 177
    {'x':   4.115 * cm, 'y': -12.344 * cm},  # 178
    {'x': -19.715 * cm, 'y':   0.000 * cm},  # 179
    {'x': -19.353 * cm, 'y':   3.762 * cm},  # 180
    {'x': -18.279 * cm, 'y':   7.385 * cm},  # 181
    {'x': -16.534 * cm, 'y':  10.738 * cm},  # 182
    {'x': -13.941 * cm, 'y':  13.941 * cm},  # 183
    {'x': -11.025 * cm, 'y':  16.344 * cm},  # 184
    {'x':  -7.703 * cm, 'y':  18.148 * cm},  # 185
    {'x':  -4.099 * cm, 'y':  19.284 * cm},  # 186
    {'x':   0.000 * cm, 'y':  19.715 * cm},  # 187
    {'x':   3.762 * cm, 'y':  19.353 * cm},  # 188
    {'x':   7.385 * cm, 'y':  18.279 * cm},  # 189
    {'x':  10.738 * cm, 'y':  16.534 * cm},  # 190
    {'x':  13.941 * cm, 'y':  13.941 * cm},  # 191
    {'x':  16.344 * cm, 'y':  11.025 * cm},  # 192
    {'x':  18.148 * cm, 'y':   7.703 * cm},  # 193
    {'x':  19.284 * cm, 'y':   4.099 * cm},  # 194
    {'x':  19.715 * cm, 'y':   0.000 * cm},  # 195
    {'x':  19.353 * cm, 'y':  -3.762 * cm},  # 196
    {'x':  18.279 * cm, 'y':  -7.385 * cm},  # 197
    {'x':  16.534 * cm, 'y': -10.738 * cm},  # 198
    {'x':  13.941 * cm, 'y': -13.941 * cm},  # 199
    {'x':  11.025 * cm, 'y': -16.344 * cm},  # 200
    {'x':   7.703 * cm, 'y': -18.148 * cm},  # 201
    {'x':   4.099 * cm, 'y': -19.284 * cm},  # 202
    {'x':   0.000 * cm, 'y': -19.715 * cm},  # 203
    {'x':  -3.762 * cm, 'y': -19.353 * cm},  # 204
    {'x':  -7.385 * cm, 'y': -18.279 * cm},  # 205
    {'x': -10.738 * cm, 'y': -16.534 * cm},  # 206
    {'x': -13.941 * cm, 'y': -13.941 * cm},  # 207
    {'x': -16.344 * cm, 'y': -11.025 * cm},  # 208
    {'x': -18.148 * cm, 'y':  -7.703 * cm},  # 209
    {'x': -19.284 * cm, 'y':  -4.099 * cm},  # 210
    {'x': -19.715 * cm, 'y':   0.000 * cm},  # 211
    {'x': -19.353 * cm, 'y':   3.762 * cm},  # 212
    {'x': -18.279 * cm, 'y':   7.385 * cm},  # 213
    {'x': -16.534 * cm, 'y':  10.738 * cm},  # 214
    {'x': -13.941 * cm, 'y':  13.941 * cm},  # 215
    {'x': -11.025 * cm, 'y':  16.344 * cm},  # 216
    {'x':  -7.703 * cm, 'y':  18.148 * cm},  # 217
    {'x':  -4.099 * cm, 'y':  19.284 * cm},  # 218
    {'x':  -0.000 * cm, 'y':  19.715 * cm},  # 219
    {'x':   3.762 * cm, 'y':  19.353 * cm},  # 220
    {'x':   7.385 * cm, 'y':  18.279 * cm},  # 221
    {'x':  10.738 * cm, 'y':  16.534 * cm},  # 222
    {'x':  13.941 * cm, 'y':  13.941 * cm},  # 223
    {'x':  16.344 * cm, 'y':  11.025 * cm},  # 224
    {'x':  18.148 * cm, 'y':   7.703 * cm},  # 225
    {'x':  19.284 * cm, 'y':   4.099 * cm},  # 226
    {'x':  19.715 * cm, 'y':   0.000 * cm},  # 227
    {'x':  19.353 * cm, 'y':  -3.762 * cm},  # 228
    {'x':  18.279 * cm, 'y':  -7.385 * cm},  # 229
    {'x':  16.534 * cm, 'y': -10.738 * cm},  # 230
    {'x':  13.941 * cm, 'y': -13.941 * cm},  # 231
    {'x':  11.025 * cm, 'y': -16.344 * cm},  # 232
    {'x':   7.703 * cm, 'y': -18.148 * cm},  # 233
    {'x':   4.099 * cm, 'y': -19.284 * cm},  # 234
    {'x':  -0.000 * cm, 'y': -19.715 * cm},  # 235
    {'x':  -3.762 * cm, 'y': -19.353 * cm},  # 236
    {'x':  -7.385 * cm, 'y': -18.279 * cm},  # 237
    {'x': -10.738 * cm, 'y': -16.534 * cm},  # 238
    {'x': -13.941 * cm, 'y': -13.941 * cm},  # 239
    {'x': -16.344 * cm, 'y': -11.025 * cm},  # 240
    {'x': -18.148 * cm, 'y':  -7.703 * cm},  # 241
    {'x': -19.284 * cm, 'y':  -4.099 * cm},  # 242
    ]

# PMT gains
# Extracted from Zurich's Xenon100 PMT gain database using examples/extract_gain
# File used: all120326_1544.gain
# A few of these gains are zero: we'll assume these PMTs are turned off.
# PMT 0 does not exist (real Xenon100 PMTs start from 0), so it gets gain 0.
gains = [
             # 0   -- PMT zero is fake!
               0,
             # 1               # 2               # 3               # 4               # 5
       2675000.0,        2958000.0,        1936000.0,        2326000.0,        1964000.0,
             # 6               # 7               # 8               # 9              # 10
       1971000.0,        2104000.0,        1999000.0,              0.0,        2102000.0,
            # 11              # 12              # 13              # 14              # 15
       2044000.0,              0.0,        2177000.0,        2180000.0,        2265000.0,
            # 16              # 17              # 18              # 19              # 20
       2293000.0,        2177000.0,        2331000.0,        2099000.0,        2096000.0,
            # 21              # 22              # 23              # 24              # 25
       1899000.0,        2111000.0,        1874000.0,        1948000.0,        2106000.0,
            # 26              # 27              # 28              # 29              # 30
       2121000.0,        1987000.0,        1889000.0,        2473000.0,        2161000.0,
            # 31              # 32              # 33              # 34              # 35
       2192000.0,        2329000.0,        1112000.0,        2157000.0,        2106000.0,
            # 36              # 37              # 38              # 39              # 40
       2182000.0,        2001000.0,        1921000.0,              0.0,        2121000.0,
            # 41              # 42              # 43              # 44              # 45
       1852000.0,        1878000.0,        2088000.0,        1974000.0,        1940000.0,
            # 46              # 47              # 48              # 49              # 50
       2134000.0,        2132000.0,        2018000.0,        2207000.0,        2237000.0,
            # 51              # 52              # 53              # 54              # 55
       2201000.0,        1985000.0,        2173000.0,        2126000.0,        2288000.0,
            # 56              # 57              # 58              # 59              # 60
       2140000.0,        2170000.0,              0.0,        2408000.0,        2253000.0,
            # 61              # 62              # 63              # 64              # 65
       2109000.0,        2134000.0,        1979000.0,        2267000.0,        2149000.0,
            # 66              # 67              # 68              # 69              # 70
       2164000.0,        2077000.0,        2170000.0,        2223000.0,        2325000.0,
            # 71              # 72              # 73              # 74              # 75
       2122000.0,        2343000.0,        2312000.0,        2090000.0,        1944000.0,
            # 76              # 77              # 78              # 79              # 80
       2091000.0,        1948000.0,        1974000.0,        2098000.0,        2134000.0,
            # 81              # 82              # 83              # 84              # 85
       2184000.0,        1992000.0,        2150000.0,        1980000.0,        1878000.0,
            # 86              # 87              # 88              # 89              # 90
       2093000.0,        2162000.0,        1901000.0,        2120000.0,        2059000.0,
            # 91              # 92              # 93              # 94              # 95
       2281000.0,        2214000.0,        2143000.0,        1943000.0,        1934000.0,
            # 96              # 97              # 98              # 99             # 100
       2410000.0,        2227000.0,        1843000.0,        1881000.0,              0.0,
           # 101             # 102             # 103             # 104             # 105
       1965000.0,        2368000.0,        1938000.0,        1981000.0,              0.0,
           # 106             # 107             # 108             # 109             # 110
       1732000.0,        2091000.0,        1932000.0,        2080000.0,        2145000.0,
           # 111             # 112             # 113             # 114             # 115
       1932000.0,        1806000.0,        1939000.0,        1765000.0,        2111000.0,
           # 116             # 117             # 118             # 119             # 120
       2001000.0,        1917000.0,        2082000.0,        2043000.0,        2027000.0,
           # 121             # 122             # 123             # 124             # 125
       1833000.0,        1972000.0,        2030000.0,        2139000.0,        1946000.0,
           # 126             # 127             # 128             # 129             # 130
       1988000.0,        1967000.0,        2190000.0,        2217000.0,        2092000.0,
           # 131             # 132             # 133             # 134             # 135
       2252000.0,        2170000.0,        2014000.0,        1953000.0,        1997000.0,
           # 136             # 137             # 138             # 139             # 140
       1966000.0,        1854000.0,        2098000.0,        1639000.0,        2229000.0,
           # 141             # 142             # 143             # 144             # 145
       1759000.0,        1987000.0,        1911000.0,        1858000.0,        1653000.0,
           # 146             # 147             # 148             # 149             # 150
       2036000.0,        1716000.0,              0.0,        1907000.0,        2165000.0,
           # 151             # 152             # 153             # 154             # 155
       1833000.0,        2126000.0,        2119000.0,        1763000.0,        1990000.0,
           # 156             # 157             # 158             # 159             # 160
       1869000.0,        1874000.0,        2030000.0,        2152000.0,        1917000.0,
           # 161             # 162             # 163             # 164             # 165
       1749000.0,        1668000.0,        2085000.0,        1886000.0,        1692000.0,
           # 166             # 167             # 168             # 169             # 170
       2094000.0,        1446000.0,        1773000.0,        2023000.0,        1737000.0,
           # 171             # 172             # 173             # 174             # 175
       1859000.0,        1887000.0,        1872000.0,        2013000.0,        2078000.0,
           # 176             # 177             # 178             # 179             # 180
       1796000.0,              0.0,        1770000.0,        2018000.0,        2220000.0,
           # 181             # 182             # 183             # 184             # 185
       2544000.0,         978900.0,        1795000.0,        1445000.0,        1988000.0,
           # 186             # 187             # 188             # 189             # 190
       2032000.0,        1915000.0,        2143000.0,        2096000.0,              0.0,
           # 191             # 192             # 193             # 194             # 195
             0.0,        2081000.0,        1730000.0,        1637000.0,              0.0,
           # 196             # 197             # 198             # 199             # 200
       1936000.0,        1665000.0,        1958000.0,        1976000.0,        1975000.0,
           # 201             # 202             # 203             # 204             # 205
       1885000.0,        2101000.0,        2014000.0,        1997000.0,        2001000.0,
           # 206             # 207             # 208             # 209             # 210
       1993000.0,        1915000.0,        2113000.0,        1985000.0,        1813000.0,
           # 211             # 212             # 213             # 214             # 215
       2156000.0,        2041000.0,        2060000.0,        1890000.0,        2162000.0,
           # 216             # 217             # 218             # 219             # 220
       1810000.0,        1988000.0,        1983000.0,        1946000.0,        1941000.0,
           # 221             # 222             # 223             # 224             # 225
       2134000.0,        1829000.0,        1996000.0,              0.0,        1903000.0,
           # 226             # 227             # 228             # 229             # 230
       2096000.0,        2150000.0,        1990000.0,        1949000.0,        1870000.0,
           # 231             # 232             # 233             # 234             # 235
       2070000.0,        1946000.0,        1902000.0,        2128000.0,              0.0,
           # 236             # 237             # 238             # 239             # 240
       1946000.0,        1652000.0,        1986000.0,        1852000.0,        1909000.0,
           # 241             # 242
       1932000.0,        2013000.0,
    ]

# Sigmas of the 1pe peak in the gain spectrum, from same file
gain_sigmas = [
             # 0   -- PMT zero is fake!
               0,
             # 1               # 2               # 3               # 4               # 5
        931800.0,         891900.0,         786300.0,        1035000.0,         947800.0,
             # 6               # 7               # 8               # 9              # 10
        932700.0,        1167000.0,         976400.0,              0.0,        1154000.0,
            # 11              # 12              # 13              # 14              # 15
       1168000.0,              0.0,         956500.0,        1235000.0,        1250000.0,
            # 16              # 17              # 18              # 19              # 20
       1611000.0,        1203000.0,        1084000.0,        1333000.0,        1006000.0,
            # 21              # 22              # 23              # 24              # 25
       1051000.0,         935600.0,        1014000.0,        1281000.0,        1147000.0,
            # 26              # 27              # 28              # 29              # 30
        608800.0,         941200.0,         959700.0,        1464000.0,        1180000.0,
            # 31              # 32              # 33              # 34              # 35
       1186000.0,        1244000.0,         542500.0,        1146000.0,         951200.0,
            # 36              # 37              # 38              # 39              # 40
       1274000.0,        1075000.0,        1181000.0,              0.0,        1153000.0,
            # 41              # 42              # 43              # 44              # 45
        895700.0,         921500.0,        1106000.0,         997000.0,        1030000.0,
            # 46              # 47              # 48              # 49              # 50
       1116000.0,        1167000.0,        1112000.0,        1172000.0,        1327000.0,
            # 51              # 52              # 53              # 54              # 55
       1134000.0,         978500.0,        1070000.0,        1114000.0,        1229000.0,
            # 56              # 57              # 58              # 59              # 60
       1102000.0,        1065000.0,              0.0,        1193000.0,        1194000.0,
            # 61              # 62              # 63              # 64              # 65
       1142000.0,        1117000.0,        1079000.0,        1333000.0,        1079000.0,
            # 66              # 67              # 68              # 69              # 70
       1165000.0,        1080000.0,        1107000.0,        1293000.0,        1248000.0,
            # 71              # 72              # 73              # 74              # 75
       1303000.0,        1227000.0,        1224000.0,        1048000.0,         930300.0,
            # 76              # 77              # 78              # 79              # 80
       1351000.0,        1056000.0,         997500.0,        1203000.0,        1210000.0,
            # 81              # 82              # 83              # 84              # 85
       1033000.0,        1050000.0,        1300000.0,        1042000.0,        1110000.0,
            # 86              # 87              # 88              # 89              # 90
       1106000.0,        1326000.0,        1185000.0,        1261000.0,        1136000.0,
            # 91              # 92              # 93              # 94              # 95
       1212000.0,        1210000.0,        1281000.0,        1270000.0,        1141000.0,
            # 96              # 97              # 98              # 99             # 100
       1374000.0,        1220000.0,         993000.0,        1221000.0,              0.0,
           # 101             # 102             # 103             # 104             # 105
       1010000.0,        1248000.0,         924900.0,         975400.0,              0.0,
           # 106             # 107             # 108             # 109             # 110
        908800.0,        1026000.0,        1039000.0,         985600.0,        1290000.0,
           # 111             # 112             # 113             # 114             # 115
       1271000.0,        1054000.0,         941500.0,         988600.0,        1087000.0,
           # 116             # 117             # 118             # 119             # 120
       1030000.0,         880400.0,         870500.0,         991400.0,         899400.0,
           # 121             # 122             # 123             # 124             # 125
        878000.0,         991800.0,        1090000.0,        1113000.0,         936000.0,
           # 126             # 127             # 128             # 129             # 130
        957700.0,         940200.0,        1219000.0,        1326000.0,        1234000.0,
           # 131             # 132             # 133             # 134             # 135
       1212000.0,        1184000.0,         974400.0,         942600.0,         929500.0,
           # 136             # 137             # 138             # 139             # 140
       1023000.0,        1037000.0,         950000.0,        1064000.0,        1151000.0,
           # 141             # 142             # 143             # 144             # 145
        881900.0,         960500.0,         879600.0,         907300.0,         948400.0,
           # 146             # 147             # 148             # 149             # 150
        834400.0,         966800.0,              0.0,         926600.0,         906700.0,
           # 151             # 152             # 153             # 154             # 155
        872100.0,         859100.0,         976100.0,         747200.0,         839000.0,
           # 156             # 157             # 158             # 159             # 160
        943700.0,        1224000.0,        1071000.0,        1123000.0,         814200.0,
           # 161             # 162             # 163             # 164             # 165
        888900.0,        1000000.0,         991900.0,         873800.0,         917900.0,
           # 166             # 167             # 168             # 169             # 170
        875000.0,         736700.0,        1083000.0,         822400.0,        1020000.0,
           # 171             # 172             # 173             # 174             # 175
       1088000.0,        1069000.0,         863000.0,         925700.0,         939000.0,
           # 176             # 177             # 178             # 179             # 180
       1114000.0,              0.0,         927100.0,         851500.0,         920800.0,
           # 181             # 182             # 183             # 184             # 185
       1285000.0,         874700.0,        1045000.0,         746600.0,        1415000.0,
           # 186             # 187             # 188             # 189             # 190
        895900.0,        1191000.0,         982100.0,         900900.0,              0.0,
           # 191             # 192             # 193             # 194             # 195
             0.0,        1268000.0,        1362000.0,        1308000.0,              0.0,
           # 196             # 197             # 198             # 199             # 200
       1287000.0,        1156000.0,        1169000.0,        1411000.0,        1127000.0,
           # 201             # 202             # 203             # 204             # 205
        876800.0,        1350000.0,        1131000.0,        1249000.0,        1477000.0,
           # 206             # 207             # 208             # 209             # 210
       1218000.0,        1122000.0,        1093000.0,        1275000.0,         894900.0,
           # 211             # 212             # 213             # 214             # 215
        928500.0,        1045000.0,        1009000.0,         894700.0,         885000.0,
           # 216             # 217             # 218             # 219             # 220
        947500.0,         991300.0,        1087000.0,        1160000.0,        1138000.0,
           # 221             # 222             # 223             # 224             # 225
       1124000.0,        1156000.0,        1090000.0,              0.0,         944000.0,
           # 226             # 227             # 228             # 229             # 230
       1113000.0,        1335000.0,        1182000.0,         983200.0,        1153000.0,
           # 231             # 232             # 233             # 234             # 235
       1335000.0,        1344000.0,        1103000.0,        1288000.0,              0.0,
           # 236             # 237             # 238             # 239             # 240
       1173000.0,        1226000.0,         942800.0,        1117000.0,        1182000.0,
           # 241             # 242
       1042000.0,        1096000.0,
    ]

# Quantum Efficiency of the PMTs
# Taken from the PMT database on the wiki
# Values are given as fractions, "Not given" entries are replaced by the nanmean of other PMTs
# in the same array (top/bottom/veto). You can easily recognize these, they have more than three decimals.
quantum_efficiencies = [
        0.        ,  0.245     ,  0.264     ,  0.237     ,  0.241     ,
        0.252     ,  0.252     ,  0.234     ,  0.23      ,  0.241     ,
        0.241     ,  0.237     ,  0.26      ,  0.249     ,  0.252     ,
        0.264     ,  0.241     ,  0.256     ,  0.245     ,  0.245     ,
        0.256     ,  0.234     ,  0.241     ,  0.253     ,  0.23      ,
        0.245     ,  0.241     ,  0.241     ,  0.256     ,  0.249     ,
        0.237     ,  0.237     ,  0.256     ,  0.256     ,  0.252     ,
        0.249     ,  0.245     ,  0.245     ,  0.249     ,  0.241     ,
        0.267     ,  0.256     ,  0.256     ,  0.267     ,  0.241     ,
        0.23      ,  0.237     ,  0.252     ,  0.256     ,  0.231     ,
        0.237     ,  0.237     ,  0.252     ,  0.241     ,  0.275     ,
        0.237     ,  0.245     ,  0.249     ,  0.24355102,  0.215     ,
        0.241     ,  0.26      ,  0.249     ,  0.222     ,  0.249     ,
        0.249     ,  0.264     ,  0.241     ,  0.237     ,  0.226     ,
        0.237     ,  0.264     ,  0.252     ,  0.267     ,  0.249     ,
        0.256     ,  0.252     ,  0.241     ,  0.245     ,  0.241     ,
        0.241     ,  0.237     ,  0.249     ,  0.245     ,  0.245     ,
        0.264     ,  0.264     ,  0.241     ,  0.249     ,  0.252     ,
        0.23      ,  0.226     ,  0.23      ,  0.245     ,  0.252     ,
        0.267     ,  0.245     ,  0.23      ,  0.234     ,  0.29      ,
        0.2902381 ,  0.2902381 ,  0.276     ,  0.241     ,  0.311     ,
        0.2902381 ,  0.2902381 ,  0.324     ,  0.2902381 ,  0.246     ,
        0.242     ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.238     ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.31      ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.352     ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.325     ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.355     ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.271     ,  0.271     ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,  0.2902381 ,
        0.2902381 ,  0.2902381 ,  0.342     ,  0.358     ,  0.294     ,
        0.237     ,  0.275     ,  0.291     ,  0.246     ,  0.235     ,
        0.234     ,  0.246     ,  0.239     ,  0.242     ,  0.26      ,
        0.229     ,  0.247     ,  0.245     ,  0.246     ,  0.226     ,
        0.245     ,  0.234     ,  0.23      ,  0.238     ,  0.256     ,
        0.259     ,  0.241     ,  0.23      ,  0.238     ,  0.258     ,
        0.266     ,  0.208     ,  0.235     ,  0.241     ,  0.252     ,
        0.256     ,  0.26      ,  0.245     ,  0.246     ,  0.226     ,
        0.256     ,  0.229     ,  0.214     ,  0.211     ,  0.215     ,
        0.241     ,  0.235     ,  0.237     ,  0.225     ,  0.204     ,
        0.256     ,  0.224     ,  0.264     ,  0.241     ,  0.232     ,
        0.209     ,  0.218     ,  0.221     ,  0.214     ,  0.267     ,
        0.205     ,  0.245     ,  0.222     ,  0.214     ,  0.23734921,
        0.251     ,  0.225     ,  0.245     ,  0.203     ,  0.271     ,
        0.245     ,  0.264     ,  0.237     ]

# Relative error / uncertainty on QE
# TODO: remove placeholder
relative_qe_error = 0.02

# Relative error / uncertainty on gains
# Note this is NOT the spread of the 1pe gain spectrum! (gain_sigmas above)
relative_gain_error = 0.03    # Systmatic of PMT gain calibration. TODO: add ref.



[NeuralNet.PosRecNeuralNet]

# This file contains a dictionary defining the neural net for XENON100
# The dictionary has three keys:
# 'structure' is a list of the number of nodes per layer (including input and output layer)
# 'weights' is a list that stores the weights of the connections between all nodes
# 'biases' is a list that stores the biases for all nodes (except input nodes)
# Specific information about weights and biases is given below
neural_net_file = 'NN_XENON100.npz'

# Biases used by the neuron activation functions, taken from nn-missing_9_12_39_58.c
# Input neuron's don't use a bias, so there should be hidden_layer_neurons + 2 biases
# In nn-missing_9_12_39_58.c input neurons had biases, but they were unusued (random [-1,1]?)

# Weights of the connections, taken from nn-missing_9_12_39_58.c
# The first n_top_pmts * hidden_layer_neurons are for the connections from the input to the hidden layer:
#   The first 98 for the first hidden layer neuron, the next 98 of the second hidden layer neuron, etc
# The next hidden_layer_neurons * 2 are for the connections from the hidden to the output layer
#   The first hidden_layer_neurons for the x-output neuron, the next hidden_layer_neurons for the y-output neuron, etc

# Neural network outputs position in this unit. Will be converted to pax units.
nn_output_unit = mm

# This neural net scales the input of the activation function by this factor
activation_function_scale = 1.0

# This neural net applies the activation function also on the output layer
output_layer_function = False

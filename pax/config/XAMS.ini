##
#   Configuration for XAMS (Nikhef's small LXe TPC)
##

[pax]
parent_configuration = "_base"

dsp = [
       'BuildWaveforms.BuildWaveforms',
       'Filtering.Filtering',
       'newDSP.FindPeaks',
       #'newDSP.SplitPeaks',
       'newDSP.ComputePeakProperties',
       'newDSP.IdentifyPeaks',
       ]

transform = []  # Don't try the Xenon100 position reconstruction...

input = 'XAMS.XAMSBinary'
output = 'Plotting.PlotEventSummary'

[DEFAULT]
tpc_name = "XAMS"
channels_top = {0,1} #PMT 0 is fake
channels_bottom = {2}
channels_veto = set()
channels_excluded_for_s1 = set()
gains = {0:0, 1: 2e6, 2: 2e6}               # TODO: adjust!

digitizer_voltage_range = 5 * V             # TODO: adjust!
digitizer_bits = 8
sample_duration = 1 * ns

[XAMS.XAMSBinary]
input_dir = 'm17'

[BuildWaveforms.BuildWaveforms]
build_nominally_gain_corrected_waveforms = False    # We'll do proper gain correction from the start
nominal_gain = 2.0* 10**6 #pe / e               # TODO: adjust!
baseline_sample_length = 46 #samples
reuse_baseline_for_adjacent_occurrences = True
rear_baselining_for_short_occurrences = True
rear_baselining_threshold_occurrence_length = 92

[Filtering.Filtering]
# TODO: adjust filters for lower digitizer dt
simulate_Xerawdp_convolution_bug = False
filters = (
        # I interpolated the XENON100 S2 filter impulse response so we have 'upsampled' it to 1 ns resolution
        {'name' : 'tpc_s2',  'source' : 'tpc',  'impulse_response' : (
            0.005452, 0.00580814, 0.00616733, 0.00652948, 0.00689454, 0.00726244,
            0.0076331, 0.00800645, 0.00838243, 0.00876097, 0.009142, 0.00952545,
            0.00991125, 0.0102993, 0.0106896, 0.0110821, 0.0114766, 0.0118731,
            0.0122716, 0.0126719, 0.013074, 0.013478, 0.0138836, 0.0142908,
            0.0146995, 0.0151096, 0.0155211, 0.0159339, 0.0163478, 0.0167629,
            0.017179, 0.0175962, 0.0180143, 0.0184332, 0.0188528, 0.0192731,
            0.0196939, 0.0201152, 0.0205368, 0.0209588, 0.021381, 0.0218033,
            0.0222257, 0.022648, 0.0230703, 0.0234923, 0.0239141, 0.0243355,
            0.0247566, 0.0251771, 0.025597, 0.0260164, 0.026435, 0.0268527,
            0.0272696, 0.0276854, 0.0281001, 0.0285136, 0.0289258, 0.0293366,
            0.029746, 0.0301537, 0.0305598, 0.0309641, 0.0313667, 0.0317674,
            0.0321661, 0.0325628, 0.0329574, 0.0333499, 0.03374, 0.0341278,
            0.0345132, 0.0348961, 0.0352764, 0.035654, 0.0360288, 0.0364009,
            0.0367699, 0.037136, 0.037499, 0.0378587, 0.0382151, 0.0385683,
            0.038918, 0.0392643, 0.039607, 0.0399461, 0.0402815, 0.0406132,
            0.040941, 0.0412648, 0.0415846, 0.0419004, 0.042212, 0.0425195,
            0.0428227, 0.0431217, 0.0434162, 0.0437064, 0.043992, 0.0442729,
            0.0445492, 0.0448208, 0.0450876, 0.0453497, 0.0456069, 0.0458592,
            0.0461065, 0.0463488, 0.046586, 0.0468179, 0.0470446, 0.0472661,
            0.0474823, 0.0476932, 0.0478987, 0.0480988, 0.0482934, 0.0484825,
            0.048666, 0.0488437, 0.0490157, 0.0491821, 0.0493427, 0.0494976,
            0.0496468, 0.0497901, 0.0499276, 0.0500593, 0.050185, 0.0503046,
            0.0504183, 0.0505261, 0.0506278, 0.0507235, 0.0508132, 0.0508968,
            0.0509743, 0.0510457, 0.051111, 0.0511699, 0.0512226, 0.0512692,
            0.0513096, 0.0513438, 0.0513718, 0.0513937, 0.0514093, 0.0514188,
            0.051422, 0.0514188, 0.0514093, 0.0513937, 0.0513718, 0.0513438,
            0.0513096, 0.0512692, 0.0512226, 0.0511699, 0.051111, 0.0510457,
            0.0509743, 0.0508968, 0.0508132, 0.0507235, 0.0506278, 0.0505261,
            0.0504183, 0.0503046, 0.050185, 0.0500593, 0.0499276, 0.0497901,
            0.0496468, 0.0494976, 0.0493427, 0.0491821, 0.0490157, 0.0488437,
            0.048666, 0.0484825, 0.0482934, 0.0480988, 0.0478987, 0.0476932,
            0.0474823, 0.0472661, 0.0470446, 0.0468179, 0.046586, 0.0463488,
            0.0461065, 0.0458592, 0.0456069, 0.0453497, 0.0450876, 0.0448208,
            0.0445492, 0.0442729, 0.043992, 0.0437064, 0.0434162, 0.0431217,
            0.0428227, 0.0425195, 0.042212, 0.0419004, 0.0415846, 0.0412648,
            0.040941, 0.0406132, 0.0402815, 0.0399461, 0.039607, 0.0392643,
            0.038918, 0.0385683, 0.0382151, 0.0378587, 0.037499, 0.037136,
            0.0367699, 0.0364009, 0.0360288, 0.035654, 0.0352764, 0.0348961,
            0.0345132, 0.0341278, 0.03374, 0.0333499, 0.0329574, 0.0325628,
            0.0321661, 0.0317674, 0.0313667, 0.0309641, 0.0305598, 0.0301537,
            0.029746, 0.0293366, 0.0289258, 0.0285136, 0.0281001, 0.0276854,
            0.0272696, 0.0268527, 0.026435, 0.0260164, 0.025597, 0.0251771,
            0.0247566, 0.0243355, 0.0239141, 0.0234923, 0.0230703, 0.022648,
            0.0222257, 0.0218033, 0.021381, 0.0209588, 0.0205368, 0.0201152,
            0.0196939, 0.0192731, 0.0188528, 0.0184332, 0.0180143, 0.0175962,
            0.017179, 0.0167629, 0.0163478, 0.0159339, 0.0155211, 0.0151096,
            0.0146995, 0.0142908, 0.0138836, 0.013478, 0.013074, 0.0126719,
            0.0122716, 0.0118731, 0.0114766, 0.0110821, 0.0106896, 0.0102993,
            0.00991125, 0.00952545, 0.009142, 0.00876097, 0.00838243, 0.00800645,
            0.0076331, 0.00726244, 0.00689454, 0.00652948, 0.00616733,
            0.00580814, 0.005452
        )},
        # Stupid 60 ns Triangular filter
        {'name' : 'tpc_s1',  'source' : 'tpc',  'impulse_response' : list(range(30))+list(reversed(range(30)))},
    )

[newDSP.FindPeaks]
peakfinders = [
        {
            'peakfinding_wave'          : 'tpc_s2',
            'unfiltered_wave'           : 'tpc',
            'threshold'                 :  0.5, # pe/bin       # Quite high, we have a lot of noise...
            'peak_integration_bound'    :  0.01, # of maximum
        },
        {
            'peakfinding_wave'          : 'tpc_s1',
            'unfiltered_wave'           : 'tpc',
            'threshold'                 :  0.25, # pe/bin       # Quite high, we have a lot of noise...
            'peak_integration_bound'    :  0.01, # of maximum
        },
    ]

[newDSP.ComputePeakProperties]
minimum_area = 0.8 #pe  # Minimum area seen in a PMT to count towards the coincidence level

[newDSP.IdentifyPeaks]
s1_half_area_in = 50 #samples   #Number of samples which must contain >50% of area for a peak to count as S1

[Plotting.PlotWaveform]
waveforms_to_plot = (
        {'internal_name': 'tpc',  'plot_label': 'TPC (raw)'},
        {'internal_name': 'tpc_s2',  'plot_label': 'TPC (filtered for s2)'},
        {'internal_name': 'tpc_s1',  'plot_label': 'TPC (filtered for s1)'},
    )